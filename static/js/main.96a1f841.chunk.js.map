{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","map","robot","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","Component","App","_this$props","searchFieldx","onSearchChange","filtered","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","onRequestRobots","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96a1f841.chunk.js","sourcesContent":["import { \r\n\t\tCHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n\t\t } from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: '',\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\n\r\n/*Reducers basically checks for which action type was sent to it,\r\n\tchecks the update\r\n*/\r\nexport const searchRobots = (state = initialStateSearch, action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t// console.log('d')\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n/*const initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}*/\r\nexport const requestRobots = (state = initialStateSearch, action ={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) =>{\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src ={`https://robohash.org/${id}`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map(robot =>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey = {robot.id}\r\n\t\t\t\t\t\tname = {robot.name}\r\n\t\t\t\t\t\tid = {robot.id}\r\n\t\t\t\t\t\temail = {robot.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n\t\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder ='search robots'\r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style = {{overflow: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.hasError ? <h1>Oops, something bugs here.</h1> : this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { connect } from 'react-redux';\r\nimport './css/App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) =>{//Tells what state the component needs to listen for and send down as props\r\n\t\t// console.log(state);\r\n\r\n\treturn {\r\n\t\t// searchFieldx: state.searchField //Because we only have one reducer we are working with now\r\n\t\t//Returns the properties set in the reducers that this component is concerned with\r\n\t\tsearchFieldx: state.searchRobots.searchField, \r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{//Tells what actions that this component is interested in\r\n\treturn{\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\t// On search, trigger the setSearch fxn which returns the type of action and the payload\r\n\t\t// then dispatch it to the reducer which makes the relevant change and returns the\r\n\t\t// the parts of the updated part of the state\r\n\t\t// Now Provider uses mapStateToProps to determine the parts of the state it should send back \r\n\t\t// to this component as props\r\n\t\tonRequestRobots: () => requestRobots(dispatch)//This is an async fxn hence the syntax\r\n\t}\r\n}\r\n\r\nclass App extends Component{\t\r\n\r\n\trender(){\r\n\t\tconst { searchFieldx, onSearchChange, isPending, robots } = this.props;//These were gotten through redux's connect\r\n\t\tconst filtered = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchFieldx.toLowerCase());\r\n\t\t})\r\n\t\tif(!isPending){\r\n\t\t\treturn (\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className=\"f1\">Robofriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots = {filtered}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1>Loading</h1>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n// connect it a higher order fxn, meaning it returns a fuction\r\n// This in turn runs with (App) as a parameter\r\n\r\n/*\r\nConnect sends the states and actions that this component is interested in to the Provider in the parent\r\ncomponent which in turn passes it into the store and generates the appropriate values which it sends back\r\nto this component as props\r\n*/","import { \r\n\t\tCHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n\t\t } from './constants';\r\n\r\nexport const setSearchField = (text) => ({//It's in brackets to save us the need to return\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) =>{//Reducers for Async requests make use of the dispatch\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())//convert to json\r\n\t.then(response => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: response}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';//Passes down the parts of the store that each component \n\t\t\t\t\t\t\t\t\t\t//needs onstead of everything everytime\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';//Used for ajax requests that affects state in the store\n//It waits and sees if any action returns a function instead of an object\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\nReactDOM.render( \n\t\t\t\t<Provider store = {store}>\n\t\t\t\t\t<App/>\n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}